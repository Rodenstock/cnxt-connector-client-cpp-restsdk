/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SessionResponse.h
 *
 * Represents a session response
 */

#ifndef COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_SessionResponse_H_
#define COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_SessionResponse_H_


#include "../ModelBase.h"

#include "Session.h"
#include "SessionResponse_allOf.h"
#include "B2BOptic.h"
#include "SessionLink.h"
#include <cpprest/details/basic_types.h>
#include "Patient.h"

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace model {


/// <summary>
/// Represents a session response
/// </summary>
class  SessionResponse
    : public ModelBase
{
public:
    SessionResponse();
    virtual ~SessionResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SessionResponse members

    /// <summary>
    /// ID of the session
    /// </summary>
    utility::string_t getId() const;
    
    void setId(const utility::string_t& value);

    /// <summary>
    /// External ID of the session, which is assigned to the session in a 3rd party application
    /// </summary>
    utility::string_t getExternalId() const;
    bool externalIdIsSet() const;
    void unsetExternalId();

    void setExternalId(const utility::string_t& value);

    /// <summary>
    /// Name of the session
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Notes of the session
    /// </summary>
    utility::string_t getNotes() const;
    bool notesIsSet() const;
    void unsetNotes();

    void setNotes(const utility::string_t& value);

    /// <summary>
    /// State of the session. (Supported values: OPEN, CLOSED, ORDERED, EXPORTED, SAVED)
    /// </summary>
    utility::string_t getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(const utility::string_t& value);

    /// <summary>
    /// Patient ID associated with the session
    /// </summary>
    utility::string_t getPatientId() const;
    bool patientIdIsSet() const;
    void unsetPatientId();

    void setPatientId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Patient> getPatient() const;
    bool patientIsSet() const;
    void unsetPatient();

    void setPatient(const std::shared_ptr<Patient>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<B2BOptic> getB2bOptic() const;
    bool b2bOpticIsSet() const;
    void unsetB2bOptic();

    void setB2bOptic(const std::shared_ptr<B2BOptic>& value);

    /// <summary>
    /// Date of creation of the session
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// Date of modification of the session
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SessionLink> getLinks() const;
    bool linksIsSet() const;
    void unset_links();

    void setLinks(const std::shared_ptr<SessionLink>& value);


protected:
    utility::string_t m_Id;
        utility::string_t m_ExternalId;
    bool m_ExternalIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Notes;
    bool m_NotesIsSet;
    utility::string_t m_State;
    bool m_StateIsSet;
    utility::string_t m_PatientId;
    bool m_PatientIdIsSet;
    std::shared_ptr<Patient> m_Patient;
    bool m_PatientIsSet;
    std::shared_ptr<B2BOptic> m_B2bOptic;
    bool m_B2bOpticIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
    std::shared_ptr<SessionLink> m__links;
    bool m__linksIsSet;
};


}
}
}
}
}
}

#endif /* COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_SessionResponse_H_ */
