/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PageInfo.h
 *
 * Represents pagination information
 */

#ifndef COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_PageInfo_H_
#define COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_PageInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace model {


/// <summary>
/// Represents pagination information
/// </summary>
class  PageInfo
    : public ModelBase
{
public:
    PageInfo();
    virtual ~PageInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PageInfo members

    /// <summary>
    /// True if and only if this page is not the first page
    /// </summary>
    bool isHasPreviousPage() const;
    bool hasPreviousPageIsSet() const;
    void unsetHasPreviousPage();

    void setHasPreviousPage(bool value);

    /// <summary>
    /// True if and only if this page is not the last page
    /// </summary>
    bool isHasNextPage() const;
    bool hasNextPageIsSet() const;
    void unsetHasNextPage();

    void setHasNextPage(bool value);

    /// <summary>
    /// Cursor to the first edge, or null if this page is empty
    /// </summary>
    utility::string_t getStartCursor() const;
    bool startCursorIsSet() const;
    void unsetStartCursor();

    void setStartCursor(const utility::string_t& value);

    /// <summary>
    /// Cursor to the last edge, or null if this page is empty
    /// </summary>
    utility::string_t getEndCursor() const;
    bool endCursorIsSet() const;
    void unsetEndCursor();

    void setEndCursor(const utility::string_t& value);


protected:
    bool m_HasPreviousPage;
    bool m_HasPreviousPageIsSet;
    bool m_HasNextPage;
    bool m_HasNextPageIsSet;
    utility::string_t m_StartCursor;
    bool m_StartCursorIsSet;
    utility::string_t m_EndCursor;
    bool m_EndCursorIsSet;
};


}
}
}
}
}
}

#endif /* COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_PageInfo_H_ */
