/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PatientLink.h"

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace model {




PatientLink::PatientLink()
{
    m_PatientIsSet = false;
    m_SessionsIsSet = false;
}

PatientLink::~PatientLink()
{
}

void PatientLink::validate()
{
    // TODO: implement validation
}

web::json::value PatientLink::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("self")] = ModelBase::toJson(m_Self);
    if(m_PatientIsSet)
    {
        val[utility::conversions::to_string_t("patient")] = ModelBase::toJson(m_Patient);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Sessions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("sessions")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void PatientLink::fromJson(const web::json::value& val)
{
    std::shared_ptr<PatientLink_self> newSelf(new PatientLink_self());
    newSelf->fromJson(val.at(utility::conversions::to_string_t("self")));
    setSelf( newSelf );
    if(val.has_field(utility::conversions::to_string_t("patient")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("patient"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PatientLink_patient> newItem(new PatientLink_patient());
            newItem->fromJson(fieldValue);
            setPatient( newItem );
        }
    }
    {
        m_Sessions.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("sessions")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("sessions")).as_array() )
        {
            if(item.is_null())
            {
                m_Sessions.push_back( std::shared_ptr<Object>(nullptr) );
            }
            else
            {
                std::shared_ptr<Object> newItem(nullptr);
                newItem->fromJson(item);
                m_Sessions.push_back( newItem );
            }
        }
        }
    }
}

void PatientLink::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_Self->toMultipart(multipart, utility::conversions::to_string_t("self."));
    if(m_PatientIsSet)
    {
        if (m_Patient.get())
        {
            m_Patient->toMultipart(multipart, utility::conversions::to_string_t("patient."));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Sessions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sessions"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void PatientLink::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<PatientLink_self> newSelf(new PatientLink_self());
    newSelf->fromMultiPart(multipart, utility::conversions::to_string_t("self."));
    setSelf( newSelf );
    if(multipart->hasContent(utility::conversions::to_string_t("patient")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("patient")))
        {
            std::shared_ptr<PatientLink_patient> newItem(new PatientLink_patient());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("patient."));
            setPatient( newItem );
        }
    }
    {
        m_Sessions.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("sessions")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sessions"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Sessions.push_back( std::shared_ptr<Object>(nullptr) );
            }
            else
            {
                std::shared_ptr<Object> newItem(nullptr);
                newItem->fromJson(item);
                m_Sessions.push_back( newItem );
            }
        }
        }
    }
}

std::shared_ptr<PatientLink_self> PatientLink::getSelf() const
{
    return m_Self;
}

void PatientLink::setSelf(const std::shared_ptr<PatientLink_self>& value)
{
    m_Self = value;
    
}

std::shared_ptr<PatientLink_patient> PatientLink::getPatient() const
{
    return m_Patient;
}

void PatientLink::setPatient(const std::shared_ptr<PatientLink_patient>& value)
{
    m_Patient = value;
    m_PatientIsSet = true;
}

bool PatientLink::patientIsSet() const
{
    return m_PatientIsSet;
}

void PatientLink::unsetPatient()
{
    m_PatientIsSet = false;
}

std::vector<std::shared_ptr<Object>>& PatientLink::getSessions()
{
    return m_Sessions;
}

void PatientLink::setSessions(const std::vector<std::shared_ptr<Object>>& value)
{
    m_Sessions = value;
    m_SessionsIsSet = true;
}

bool PatientLink::sessionsIsSet() const
{
    return m_SessionsIsSet;
}

void PatientLink::unsetSessions()
{
    m_SessionsIsSet = false;
}

}
}
}
}
}
}


