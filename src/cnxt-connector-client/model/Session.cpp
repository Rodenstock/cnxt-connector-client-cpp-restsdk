/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Session.h"

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace model {




Session::Session()
{
    m_Id = utility::conversions::to_string_t("");
    m_ExternalId = utility::conversions::to_string_t("");
    m_ExternalIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Notes = utility::conversions::to_string_t("");
    m_NotesIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
    m_PatientId = utility::conversions::to_string_t("");
    m_PatientIdIsSet = false;
    m_PatientIsSet = false;
    m_B2bOpticIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

Session::~Session()
{
}

void Session::validate()
{
    // TODO: implement validation
}

web::json::value Session::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    if(m_ExternalIdIsSet)
    {
        val[utility::conversions::to_string_t("externalId")] = ModelBase::toJson(m_ExternalId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_NotesIsSet)
    {
        val[utility::conversions::to_string_t("notes")] = ModelBase::toJson(m_Notes);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }
    if(m_PatientIdIsSet)
    {
        val[utility::conversions::to_string_t("patientId")] = ModelBase::toJson(m_PatientId);
    }
    if(m_PatientIsSet)
    {
        val[utility::conversions::to_string_t("patient")] = ModelBase::toJson(m_Patient);
    }
    if(m_B2bOpticIsSet)
    {
        val[utility::conversions::to_string_t("b2bOptic")] = ModelBase::toJson(m_B2bOptic);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

void Session::fromJson(const web::json::value& val)
{
    setId(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("id"))));
    if(val.has_field(utility::conversions::to_string_t("externalId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("externalId"));
        if(!fieldValue.is_null())
        {
            setExternalId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("notes"));
        if(!fieldValue.is_null())
        {
            setNotes(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("state"));
        if(!fieldValue.is_null())
        {
            setState(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("patientId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("patientId"));
        if(!fieldValue.is_null())
        {
            setPatientId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("patient")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("patient"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Patient> newItem(new Patient());
            newItem->fromJson(fieldValue);
            setPatient( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("b2bOptic")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("b2bOptic"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<B2BOptic> newItem(new B2BOptic());
            newItem->fromJson(fieldValue);
            setB2bOptic( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            setUpdatedAt(ModelBase::dateFromJson(fieldValue));
        }
    }
}

void Session::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    if(m_ExternalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalId"), m_ExternalId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_NotesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notes"), m_Notes));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
    }
    if(m_PatientIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("patientId"), m_PatientId));
    }
    if(m_PatientIsSet)
    {
        if (m_Patient.get())
        {
            m_Patient->toMultipart(multipart, utility::conversions::to_string_t("patient."));
        }
    }
    if(m_B2bOpticIsSet)
    {
        if (m_B2bOptic.get())
        {
            m_B2bOptic->toMultipart(multipart, utility::conversions::to_string_t("b2bOptic."));
        }
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
}

void Session::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    if(multipart->hasContent(utility::conversions::to_string_t("externalId")))
    {
        setExternalId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notes")))
    {
        setNotes(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("notes"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        setState(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("state"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("patientId")))
    {
        setPatientId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("patientId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("patient")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("patient")))
        {
            std::shared_ptr<Patient> newItem(new Patient());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("patient."));
            setPatient( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("b2bOptic")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("b2bOptic")))
        {
            std::shared_ptr<B2BOptic> newItem(new B2BOptic());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("b2bOptic."));
            setB2bOptic( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        setCreatedAt(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        setUpdatedAt(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt"))));
    }
}

utility::string_t Session::getId() const
{
    return m_Id;
}

void Session::setId(const utility::string_t& value)
{
    m_Id = value;
    
}

utility::string_t Session::getExternalId() const
{
    return m_ExternalId;
}

void Session::setExternalId(const utility::string_t& value)
{
    m_ExternalId = value;
    m_ExternalIdIsSet = true;
}

bool Session::externalIdIsSet() const
{
    return m_ExternalIdIsSet;
}

void Session::unsetExternalId()
{
    m_ExternalIdIsSet = false;
}

utility::string_t Session::getName() const
{
    return m_Name;
}

void Session::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Session::nameIsSet() const
{
    return m_NameIsSet;
}

void Session::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t Session::getNotes() const
{
    return m_Notes;
}

void Session::setNotes(const utility::string_t& value)
{
    m_Notes = value;
    m_NotesIsSet = true;
}

bool Session::notesIsSet() const
{
    return m_NotesIsSet;
}

void Session::unsetNotes()
{
    m_NotesIsSet = false;
}

utility::string_t Session::getState() const
{
    return m_State;
}

void Session::setState(const utility::string_t& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool Session::stateIsSet() const
{
    return m_StateIsSet;
}

void Session::unsetState()
{
    m_StateIsSet = false;
}

utility::string_t Session::getPatientId() const
{
    return m_PatientId;
}

void Session::setPatientId(const utility::string_t& value)
{
    m_PatientId = value;
    m_PatientIdIsSet = true;
}

bool Session::patientIdIsSet() const
{
    return m_PatientIdIsSet;
}

void Session::unsetPatientId()
{
    m_PatientIdIsSet = false;
}

std::shared_ptr<Patient> Session::getPatient() const
{
    return m_Patient;
}

void Session::setPatient(const std::shared_ptr<Patient>& value)
{
    m_Patient = value;
    m_PatientIsSet = true;
}

bool Session::patientIsSet() const
{
    return m_PatientIsSet;
}

void Session::unsetPatient()
{
    m_PatientIsSet = false;
}

std::shared_ptr<B2BOptic> Session::getB2bOptic() const
{
    return m_B2bOptic;
}

void Session::setB2bOptic(const std::shared_ptr<B2BOptic>& value)
{
    m_B2bOptic = value;
    m_B2bOpticIsSet = true;
}

bool Session::b2bOpticIsSet() const
{
    return m_B2bOpticIsSet;
}

void Session::unsetB2bOptic()
{
    m_B2bOpticIsSet = false;
}

utility::datetime Session::getCreatedAt() const
{
    return m_CreatedAt;
}

void Session::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool Session::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Session::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}

utility::datetime Session::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void Session::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool Session::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Session::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}

}
}
}
}
}
}


