/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SessionLink.h
 *
 * Represents session related pagination links
 */

#ifndef COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_SessionLink_H_
#define COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_SessionLink_H_


#include "../ModelBase.h"

#include "PatientLink_self.h"
#include "SessionLink_session.h"
#include "SessionLink_b2bOptic.h"
#include "SessionLink_patient.h"

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace model {


/// <summary>
/// Represents session related pagination links
/// </summary>
class  SessionLink
    : public ModelBase
{
public:
    SessionLink();
    virtual ~SessionLink();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SessionLink members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PatientLink_self> getSelf() const;
    
    void setSelf(const std::shared_ptr<PatientLink_self>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SessionLink_session> getSession() const;
    bool sessionIsSet() const;
    void unsetSession();

    void setSession(const std::shared_ptr<SessionLink_session>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SessionLink_patient> getPatient() const;
    bool patientIsSet() const;
    void unsetPatient();

    void setPatient(const std::shared_ptr<SessionLink_patient>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SessionLink_b2bOptic> getB2bOptic() const;
    bool b2bOpticIsSet() const;
    void unsetB2bOptic();

    void setB2bOptic(const std::shared_ptr<SessionLink_b2bOptic>& value);


protected:
    std::shared_ptr<PatientLink_self> m_Self;
        std::shared_ptr<SessionLink_session> m_Session;
    bool m_SessionIsSet;
    std::shared_ptr<SessionLink_patient> m_Patient;
    bool m_PatientIsSet;
    std::shared_ptr<SessionLink_b2bOptic> m_B2bOptic;
    bool m_B2bOpticIsSet;
};


}
}
}
}
}
}

#endif /* COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_SessionLink_H_ */
