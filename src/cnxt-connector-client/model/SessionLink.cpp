/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SessionLink.h"

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace model {




SessionLink::SessionLink()
{
    m_SessionIsSet = false;
    m_PatientIsSet = false;
    m_B2bOpticIsSet = false;
}

SessionLink::~SessionLink()
{
}

void SessionLink::validate()
{
    // TODO: implement validation
}

web::json::value SessionLink::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("self")] = ModelBase::toJson(m_Self);
    if(m_SessionIsSet)
    {
        val[utility::conversions::to_string_t("session")] = ModelBase::toJson(m_Session);
    }
    if(m_PatientIsSet)
    {
        val[utility::conversions::to_string_t("patient")] = ModelBase::toJson(m_Patient);
    }
    if(m_B2bOpticIsSet)
    {
        val[utility::conversions::to_string_t("b2bOptic")] = ModelBase::toJson(m_B2bOptic);
    }

    return val;
}

void SessionLink::fromJson(const web::json::value& val)
{
    std::shared_ptr<PatientLink_self> newSelf(new PatientLink_self());
    newSelf->fromJson(val.at(utility::conversions::to_string_t("self")));
    setSelf( newSelf );
    if(val.has_field(utility::conversions::to_string_t("session")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("session"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SessionLink_session> newItem(new SessionLink_session());
            newItem->fromJson(fieldValue);
            setSession( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("patient")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("patient"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SessionLink_patient> newItem(new SessionLink_patient());
            newItem->fromJson(fieldValue);
            setPatient( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("b2bOptic")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("b2bOptic"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SessionLink_b2bOptic> newItem(new SessionLink_b2bOptic());
            newItem->fromJson(fieldValue);
            setB2bOptic( newItem );
        }
    }
}

void SessionLink::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_Self->toMultipart(multipart, utility::conversions::to_string_t("self."));
    if(m_SessionIsSet)
    {
        if (m_Session.get())
        {
            m_Session->toMultipart(multipart, utility::conversions::to_string_t("session."));
        }
    }
    if(m_PatientIsSet)
    {
        if (m_Patient.get())
        {
            m_Patient->toMultipart(multipart, utility::conversions::to_string_t("patient."));
        }
    }
    if(m_B2bOpticIsSet)
    {
        if (m_B2bOptic.get())
        {
            m_B2bOptic->toMultipart(multipart, utility::conversions::to_string_t("b2bOptic."));
        }
    }
}

void SessionLink::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<PatientLink_self> newSelf(new PatientLink_self());
    newSelf->fromMultiPart(multipart, utility::conversions::to_string_t("self."));
    setSelf( newSelf );
    if(multipart->hasContent(utility::conversions::to_string_t("session")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("session")))
        {
            std::shared_ptr<SessionLink_session> newItem(new SessionLink_session());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("session."));
            setSession( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("patient")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("patient")))
        {
            std::shared_ptr<SessionLink_patient> newItem(new SessionLink_patient());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("patient."));
            setPatient( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("b2bOptic")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("b2bOptic")))
        {
            std::shared_ptr<SessionLink_b2bOptic> newItem(new SessionLink_b2bOptic());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("b2bOptic."));
            setB2bOptic( newItem );
        }
    }
}

std::shared_ptr<PatientLink_self> SessionLink::getSelf() const
{
    return m_Self;
}

void SessionLink::setSelf(const std::shared_ptr<PatientLink_self>& value)
{
    m_Self = value;
    
}

std::shared_ptr<SessionLink_session> SessionLink::getSession() const
{
    return m_Session;
}

void SessionLink::setSession(const std::shared_ptr<SessionLink_session>& value)
{
    m_Session = value;
    m_SessionIsSet = true;
}

bool SessionLink::sessionIsSet() const
{
    return m_SessionIsSet;
}

void SessionLink::unsetSession()
{
    m_SessionIsSet = false;
}

std::shared_ptr<SessionLink_patient> SessionLink::getPatient() const
{
    return m_Patient;
}

void SessionLink::setPatient(const std::shared_ptr<SessionLink_patient>& value)
{
    m_Patient = value;
    m_PatientIsSet = true;
}

bool SessionLink::patientIsSet() const
{
    return m_PatientIsSet;
}

void SessionLink::unsetPatient()
{
    m_PatientIsSet = false;
}

std::shared_ptr<SessionLink_b2bOptic> SessionLink::getB2bOptic() const
{
    return m_B2bOptic;
}

void SessionLink::setB2bOptic(const std::shared_ptr<SessionLink_b2bOptic>& value)
{
    m_B2bOptic = value;
    m_B2bOpticIsSet = true;
}

bool SessionLink::b2bOpticIsSet() const
{
    return m_B2bOpticIsSet;
}

void SessionLink::unsetB2bOptic()
{
    m_B2bOpticIsSet = false;
}

}
}
}
}
}
}


