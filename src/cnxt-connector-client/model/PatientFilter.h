/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PatientFilter.h
 *
 * Represents a patient filter for querying patients
 */

#ifndef COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_PatientFilter_H_
#define COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_PatientFilter_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace model {


/// <summary>
/// Represents a patient filter for querying patients
/// </summary>
class  PatientFilter
    : public ModelBase
{
public:
    PatientFilter();
    virtual ~PatientFilter();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PatientFilter members

    /// <summary>
    /// Full text search parameter which is used for finding patients by first name or last name
    /// </summary>
    utility::string_t getSearch() const;
    bool searchIsSet() const;
    void unsetSearch();

    void setSearch(const utility::string_t& value);

    /// <summary>
    /// First name which is used for finding patients by first name
    /// </summary>
    utility::string_t getFirstName() const;
    bool firstNameIsSet() const;
    void unsetFirstName();

    void setFirstName(const utility::string_t& value);

    /// <summary>
    /// Last name which is used for finding patients by last name
    /// </summary>
    utility::string_t getLastName() const;
    bool lastNameIsSet() const;
    void unsetLastName();

    void setLastName(const utility::string_t& value);

    /// <summary>
    /// Date of birth which is used for finding patients by date of birth
    /// </summary>
    utility::datetime getDateOfBirth() const;
    bool dateOfBirthIsSet() const;
    void unsetDateOfBirth();

    void setDateOfBirth(const utility::datetime& value);

    /// <summary>
    /// Used for finding patients whose sessions have been updated after the specified date time
    /// </summary>
    utility::datetime getSessionUpdatedAfter() const;
    bool sessionUpdatedAfterIsSet() const;
    void unsetSessionUpdatedAfter();

    void setSessionUpdatedAfter(const utility::datetime& value);

    /// <summary>
    /// Used for finding patients whose date of creation is after the specified date time
    /// </summary>
    utility::datetime getCreatedAfter() const;
    bool createdAfterIsSet() const;
    void unsetCreatedAfter();

    void setCreatedAfter(const utility::datetime& value);

    /// <summary>
    /// Used for finding patients whose date of modification is after the specified date time
    /// </summary>
    utility::datetime getUpdatedAfter() const;
    bool updatedAfterIsSet() const;
    void unsetUpdatedAfter();

    void setUpdatedAfter(const utility::datetime& value);


protected:
    utility::string_t m_Search;
    bool m_SearchIsSet;
    utility::string_t m_FirstName;
    bool m_FirstNameIsSet;
    utility::string_t m_LastName;
    bool m_LastNameIsSet;
    utility::datetime m_DateOfBirth;
    bool m_DateOfBirthIsSet;
    utility::datetime m_SessionUpdatedAfter;
    bool m_SessionUpdatedAfterIsSet;
    utility::datetime m_CreatedAfter;
    bool m_CreatedAfterIsSet;
    utility::datetime m_UpdatedAfter;
    bool m_UpdatedAfterIsSet;
};


}
}
}
}
}
}

#endif /* COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_MODEL_PatientFilter_H_ */
