/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PatientFilter.h"

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace model {




PatientFilter::PatientFilter()
{
    m_Search = utility::conversions::to_string_t("");
    m_SearchIsSet = false;
    m_FirstName = utility::conversions::to_string_t("");
    m_FirstNameIsSet = false;
    m_LastName = utility::conversions::to_string_t("");
    m_LastNameIsSet = false;
    m_DateOfBirthIsSet = false;
    m_SessionUpdatedAfter = utility::datetime();
    m_SessionUpdatedAfterIsSet = false;
    m_CreatedAfter = utility::datetime();
    m_CreatedAfterIsSet = false;
    m_UpdatedAfter = utility::datetime();
    m_UpdatedAfterIsSet = false;
}

PatientFilter::~PatientFilter()
{
}

void PatientFilter::validate()
{
    // TODO: implement validation
}

web::json::value PatientFilter::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SearchIsSet)
    {
        val[utility::conversions::to_string_t("search")] = ModelBase::toJson(m_Search);
    }
    if(m_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_LastNameIsSet)
    {
        val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    }
    if(m_DateOfBirthIsSet)
    {
        val[utility::conversions::to_string_t("dateOfBirth")] = ModelBase::toJson(m_DateOfBirth);
    }
    if(m_SessionUpdatedAfterIsSet)
    {
        val[utility::conversions::to_string_t("sessionUpdatedAfter")] = ModelBase::toJson(m_SessionUpdatedAfter);
    }
    if(m_CreatedAfterIsSet)
    {
        val[utility::conversions::to_string_t("createdAfter")] = ModelBase::toJson(m_CreatedAfter);
    }
    if(m_UpdatedAfterIsSet)
    {
        val[utility::conversions::to_string_t("updatedAfter")] = ModelBase::toJson(m_UpdatedAfter);
    }

    return val;
}

void PatientFilter::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("search")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("search"));
        if(!fieldValue.is_null())
        {
            setSearch(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("firstName"));
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lastName"));
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dateOfBirth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dateOfBirth"));
        if (!fieldValue.is_null())
        {
            setDateOfBirth(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sessionUpdatedAfter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sessionUpdatedAfter"));
        if(!fieldValue.is_null())
        {
            setSessionUpdatedAfter(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAfter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAfter"));
        if(!fieldValue.is_null())
        {
            setCreatedAfter(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAfter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAfter"));
        if(!fieldValue.is_null())
        {
            setUpdatedAfter(ModelBase::dateFromJson(fieldValue));
        }
    }
}

void PatientFilter::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SearchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("search"), m_Search));
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
    }
    if(m_DateOfBirthIsSet)
    {
        if (m_DateOfBirth.is_initialized())
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dateOfBirth"), m_DateOfBirth));
        }
    }
    if(m_SessionUpdatedAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sessionUpdatedAfter"), m_SessionUpdatedAfter));
    }
    if(m_CreatedAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAfter"), m_CreatedAfter));
    }
    if(m_UpdatedAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAfter"), m_UpdatedAfter));
    }
}

void PatientFilter::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("search")))
    {
        setSearch(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("search"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firstName")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastName")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dateOfBirth")))
    {
        setDateOfBirth(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dateOfBirth"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sessionUpdatedAfter")))
    {
        setSessionUpdatedAfter(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sessionUpdatedAfter"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAfter")))
    {
        setCreatedAfter(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAfter"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAfter")))
    {
        setUpdatedAfter(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAfter"))));
    }
}

utility::string_t PatientFilter::getSearch() const
{
    return m_Search;
}

void PatientFilter::setSearch(const utility::string_t& value)
{
    m_Search = value;
    m_SearchIsSet = true;
}

bool PatientFilter::searchIsSet() const
{
    return m_SearchIsSet;
}

void PatientFilter::unsetSearch()
{
    m_SearchIsSet = false;
}

utility::string_t PatientFilter::getFirstName() const
{
    return m_FirstName;
}

void PatientFilter::setFirstName(const utility::string_t& value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}

bool PatientFilter::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void PatientFilter::unsetFirstName()
{
    m_FirstNameIsSet = false;
}

utility::string_t PatientFilter::getLastName() const
{
    return m_LastName;
}

void PatientFilter::setLastName(const utility::string_t& value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}

bool PatientFilter::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void PatientFilter::unsetLastName()
{
    m_LastNameIsSet = false;
}

utility::datetime PatientFilter::getDateOfBirth() const
{
    return m_DateOfBirth;
}

void PatientFilter::setDateOfBirth(const utility::datetime& value)
{
    m_DateOfBirth = value;
    m_DateOfBirthIsSet = true;
}

bool PatientFilter::dateOfBirthIsSet() const
{
    return m_DateOfBirthIsSet;
}

void PatientFilter::unsetDateOfBirth()
{
    m_DateOfBirthIsSet = false;
}

utility::datetime PatientFilter::getSessionUpdatedAfter() const
{
    return m_SessionUpdatedAfter;
}

void PatientFilter::setSessionUpdatedAfter(const utility::datetime& value)
{
    m_SessionUpdatedAfter = value;
    m_SessionUpdatedAfterIsSet = true;
}

bool PatientFilter::sessionUpdatedAfterIsSet() const
{
    return m_SessionUpdatedAfterIsSet;
}

void PatientFilter::unsetSessionUpdatedAfter()
{
    m_SessionUpdatedAfterIsSet = false;
}

utility::datetime PatientFilter::getCreatedAfter() const
{
    return m_CreatedAfter;
}

void PatientFilter::setCreatedAfter(const utility::datetime& value)
{
    m_CreatedAfter = value;
    m_CreatedAfterIsSet = true;
}

bool PatientFilter::createdAfterIsSet() const
{
    return m_CreatedAfterIsSet;
}

void PatientFilter::unsetCreatedAfter()
{
    m_CreatedAfterIsSet = false;
}

utility::datetime PatientFilter::getUpdatedAfter() const
{
    return m_UpdatedAfter;
}

void PatientFilter::setUpdatedAfter(const utility::datetime& value)
{
    m_UpdatedAfter = value;
    m_UpdatedAfterIsSet = true;
}

bool PatientFilter::updatedAfterIsSet() const
{
    return m_UpdatedAfterIsSet;
}

void PatientFilter::unsetUpdatedAfter()
{
    m_UpdatedAfterIsSet = false;
}

}
}
}
}
}
}


