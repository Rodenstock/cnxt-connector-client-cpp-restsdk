/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PageInfo.h"

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace model {




PageInfo::PageInfo()
{
    m_HasPreviousPage = false;
    m_HasPreviousPageIsSet = false;
    m_HasNextPage = false;
    m_HasNextPageIsSet = false;
    m_StartCursor = utility::conversions::to_string_t("");
    m_StartCursorIsSet = false;
    m_EndCursor = utility::conversions::to_string_t("");
    m_EndCursorIsSet = false;
}

PageInfo::~PageInfo()
{
}

void PageInfo::validate()
{
    // TODO: implement validation
}

web::json::value PageInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_HasPreviousPageIsSet)
    {
        val[utility::conversions::to_string_t("hasPreviousPage")] = ModelBase::toJson(m_HasPreviousPage);
    }
    if(m_HasNextPageIsSet)
    {
        val[utility::conversions::to_string_t("hasNextPage")] = ModelBase::toJson(m_HasNextPage);
    }
    if(m_StartCursorIsSet)
    {
        val[utility::conversions::to_string_t("startCursor")] = ModelBase::toJson(m_StartCursor);
    }
    if(m_EndCursorIsSet)
    {
        val[utility::conversions::to_string_t("endCursor")] = ModelBase::toJson(m_EndCursor);
    }

    return val;
}

void PageInfo::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("hasPreviousPage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasPreviousPage"));
        if(!fieldValue.is_null())
        {
            setHasPreviousPage(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasNextPage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasNextPage"));
        if(!fieldValue.is_null())
        {
            setHasNextPage(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startCursor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startCursor"));
        if(!fieldValue.is_null())
        {
            setStartCursor(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endCursor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endCursor"));
        if(!fieldValue.is_null())
        {
            setEndCursor(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void PageInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_HasPreviousPageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasPreviousPage"), m_HasPreviousPage));
    }
    if(m_HasNextPageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasNextPage"), m_HasNextPage));
    }
    if(m_StartCursorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startCursor"), m_StartCursor));
    }
    if(m_EndCursorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endCursor"), m_EndCursor));
    }
}

void PageInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("hasPreviousPage")))
    {
        setHasPreviousPage(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasPreviousPage"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasNextPage")))
    {
        setHasNextPage(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasNextPage"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startCursor")))
    {
        setStartCursor(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("startCursor"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endCursor")))
    {
        setEndCursor(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("endCursor"))));
    }
}

bool PageInfo::isHasPreviousPage() const
{
    return m_HasPreviousPage;
}

void PageInfo::setHasPreviousPage(bool value)
{
    m_HasPreviousPage = value;
    m_HasPreviousPageIsSet = true;
}

bool PageInfo::hasPreviousPageIsSet() const
{
    return m_HasPreviousPageIsSet;
}

void PageInfo::unsetHasPreviousPage()
{
    m_HasPreviousPageIsSet = false;
}

bool PageInfo::isHasNextPage() const
{
    return m_HasNextPage;
}

void PageInfo::setHasNextPage(bool value)
{
    m_HasNextPage = value;
    m_HasNextPageIsSet = true;
}

bool PageInfo::hasNextPageIsSet() const
{
    return m_HasNextPageIsSet;
}

void PageInfo::unsetHasNextPage()
{
    m_HasNextPageIsSet = false;
}

utility::string_t PageInfo::getStartCursor() const
{
    return m_StartCursor;
}

void PageInfo::setStartCursor(const utility::string_t& value)
{
    m_StartCursor = value;
    m_StartCursorIsSet = true;
}

bool PageInfo::startCursorIsSet() const
{
    return m_StartCursorIsSet;
}

void PageInfo::unsetStartCursor()
{
    m_StartCursorIsSet = false;
}

utility::string_t PageInfo::getEndCursor() const
{
    return m_EndCursor;
}

void PageInfo::setEndCursor(const utility::string_t& value)
{
    m_EndCursor = value;
    m_EndCursorIsSet = true;
}

bool PageInfo::endCursorIsSet() const
{
    return m_EndCursorIsSet;
}

void PageInfo::unsetEndCursor()
{
    m_EndCursorIsSet = false;
}

}
}
}
}
}
}


