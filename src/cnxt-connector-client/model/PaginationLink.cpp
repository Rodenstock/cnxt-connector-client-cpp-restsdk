/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PaginationLink.h"

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace model {




PaginationLink::PaginationLink()
{
    m_NextIsSet = false;
}

PaginationLink::~PaginationLink()
{
}

void PaginationLink::validate()
{
    // TODO: implement validation
}

web::json::value PaginationLink::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("self")] = ModelBase::toJson(m_Self);
    if(m_NextIsSet)
    {
        val[utility::conversions::to_string_t("next")] = ModelBase::toJson(m_Next);
    }

    return val;
}

void PaginationLink::fromJson(const web::json::value& val)
{
    std::shared_ptr<PatientLink_self> newSelf(new PatientLink_self());
    newSelf->fromJson(val.at(utility::conversions::to_string_t("self")));
    setSelf( newSelf );
    if(val.has_field(utility::conversions::to_string_t("next")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("next"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PaginationLink_next> newItem(new PaginationLink_next());
            newItem->fromJson(fieldValue);
            setNext( newItem );
        }
    }
}

void PaginationLink::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_Self->toMultipart(multipart, utility::conversions::to_string_t("self."));
    if(m_NextIsSet)
    {
        if (m_Next.get())
        {
            m_Next->toMultipart(multipart, utility::conversions::to_string_t("next."));
        }
    }
}

void PaginationLink::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<PatientLink_self> newSelf(new PatientLink_self());
    newSelf->fromMultiPart(multipart, utility::conversions::to_string_t("self."));
    setSelf( newSelf );
    if(multipart->hasContent(utility::conversions::to_string_t("next")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("next")))
        {
            std::shared_ptr<PaginationLink_next> newItem(new PaginationLink_next());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("next."));
            setNext( newItem );
        }
    }
}

std::shared_ptr<PatientLink_self> PaginationLink::getSelf() const
{
    return m_Self;
}

void PaginationLink::setSelf(const std::shared_ptr<PatientLink_self>& value)
{
    m_Self = value;
    
}

std::shared_ptr<PaginationLink_next> PaginationLink::getNext() const
{
    return m_Next;
}

void PaginationLink::setNext(const std::shared_ptr<PaginationLink_next>& value)
{
    m_Next = value;
    m_NextIsSet = true;
}

bool PaginationLink::nextIsSet() const
{
    return m_NextIsSet;
}

void PaginationLink::unsetNext()
{
    m_NextIsSet = false;
}

}
}
}
}
}
}


