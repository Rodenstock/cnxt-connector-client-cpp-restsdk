/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SessionsApi.h
 *
 * 
 */

#ifndef COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_API_SessionsApi_H_
#define COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_API_SessionsApi_H_


#include "../ApiClient.h"

#include "SessionFilter.h"
#include "SessionResponse.h"
#include "SessionsResponse.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace api {

using namespace com::rodenstock::cnxt::connector::client::model;



class  SessionsApi 
{
public:

    explicit SessionsApi( std::shared_ptr<ApiClient> apiClient );

    virtual ~SessionsApi();

    /// <summary>
    /// Retrieves a session by ID represented as B2BOptic XML document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<utility::string_t> getB2bOptic(
        utility::string_t id
    );
    /// <summary>
    /// Retrieves a session by ID.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">ID of the session</param>
    /// <param name="include">List of related resources for including relationships directly into session such as B2BOptic or Patient.  (Supported values: b2boptic, patient) (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    pplx::task<std::shared_ptr<SessionResponse>> getSession(
        utility::string_t id,
        boost::optional<std::vector<utility::string_t>> include
    );
    /// <summary>
    /// Retrieves a list of sessions. This endpoint implements pagination by using links. Additionally, it is possible to filter by parameters such as externalId, createdAfter, updatedAfter or to sort ascending or descending.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="first">Read the first n sessions of the set. The default and maximum value is set to 25 sessions per request.</param>
    /// <param name="after">Read all sessions in the set after (below) this cursor. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="filter">Filter session by parameters e.g. externalId, state, createdAfter, or updatedAfter. CreatedAfter is used for filtering sessions which are created after a specified date. UpdatedAfter is used for filtering sessions which are updated after a specified date.  (Supported values: externalId, createdAfter, updatedAfter, state).    A state has the following supported values: (OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional, default to new SessionFilter())</param>
    /// <param name="sort">List of parameters to sort sessions by parameter.  (Supported values: createdAt, updatedAt).    To sort descending add a &#39;-&#39; as prefix e.g. (-createdAt, -updatedAt). (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="include">List of related resources for including relationships directly into session such as Patient.  (Supported values: patient) (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    pplx::task<std::shared_ptr<SessionsResponse>> getSessions(
        int32_t first,
        boost::optional<utility::string_t> after,
        boost::optional<std::shared_ptr<SessionFilter>> filter,
        boost::optional<std::vector<utility::string_t>> sort,
        boost::optional<std::vector<utility::string_t>> include
    );
    /// <summary>
    /// Imports a B2BOptic XML document defined by the session ID. This B2BOptic XML document is assigned to an existing session via the defined session ID or assigned to this patient as a new session via the specified id of the session and specified first name, last name, or date of birth of the patient.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">ID of the session that needs to import data from B2BOptic XML document.</param>
    /// <param name="body"></param>
    /// <param name="state">State of the session that needs to import data from B2BOptic XML document.  (Supported values: OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<utility::string_t>> importB2BOptic(
        utility::string_t id,
        utility::string_t body,
        boost::optional<utility::string_t> state
    );
    /// <summary>
    /// Imports a B2BOptic XML document as a new session, which is assigned to an existing patient via Patient id. If the patient does not exist with the given patient id, a new patient is created and the new session is associated accordingly.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="body"></param>
    /// <param name="state">State of the session that needs to import data from B2BOptic XML document.  (Supported values: OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<utility::string_t>> importB2BOpticAsNewSession(
        utility::string_t body,
        boost::optional<utility::string_t> state
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}
}
}

#endif /* COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_API_SessionsApi_H_ */

