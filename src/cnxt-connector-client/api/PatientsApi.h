/**
 * CNXT-Connector
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PatientsApi.h
 *
 * 
 */

#ifndef COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_API_PatientsApi_H_
#define COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_API_PatientsApi_H_


#include "../ApiClient.h"

#include "PatientFilter.h"
#include "PatientResponse.h"
#include "PatientsResponse.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace com {
namespace rodenstock {
namespace cnxt {
namespace connector {
namespace client {
namespace api {

using namespace com::rodenstock::cnxt::connector::client::model;



class  PatientsApi 
{
public:

    explicit PatientsApi( std::shared_ptr<ApiClient> apiClient );

    virtual ~PatientsApi();

    /// <summary>
    /// Retrieves a patient by ID.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">ID of the patient</param>
    /// <param name="include">List of related resources for including relationships or properties directly into patient such as Session, latestSessionId, or latestSessionUpdate   (Supported values: session, latestSessionId, latestSessionUpdate) (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    pplx::task<std::shared_ptr<PatientResponse>> getPatient(
        utility::string_t id,
        boost::optional<std::vector<utility::string_t>> include
    );
    /// <summary>
    /// Retrieves a list of patients. The endpoint implements pagination by using links. Additionally, it is possible to filter by parameters such as lastName, firstName, createdAfter, updatedAfter or to sort ascending or descending.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="first">Fetch only the first certain number of patients of the set. The default and maximum value is set to 25 patients per request.</param>
    /// <param name="after">Fetch only patients in the set after (below) this cursor (exclusive). (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="filter">Filter patients by parameters e.g. lastName for filtering patients by their last name.  (Supported values: firstName, lastName, search, dateOfBirth, createdAfter, updatedAfter) (optional, default to new PatientFilter())</param>
    /// <param name="sort">List of parameters to sort patients by parameters.  (Supported values: lastName, firstName, latestSessionUpdate, createdAt, updatedAt).    To sort descending add a &#39;-&#39; as prefix e.g (-lastName, -firstName, -latestSessionUpdate, -createdAt, -updatedAt). (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="include">List of related resources for including relationships or properties directly into patient such as Session, latestSessionId, or latestSessionUpdate   (Supported values: session, latestSessionId, latestSessionUpdate) (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    pplx::task<std::shared_ptr<PatientsResponse>> getPatients(
        int32_t first,
        boost::optional<utility::string_t> after,
        boost::optional<std::shared_ptr<PatientFilter>> filter,
        boost::optional<std::vector<utility::string_t>> sort,
        boost::optional<std::vector<utility::string_t>> include
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}
}
}

#endif /* COM_RODENSTOCK_CNXT_CONNECTOR_CLIENT_API_PatientsApi_H_ */

